{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","markComplete","e","console","log","this","id","title","style","type","onChange","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","Header","headerStyle","to","linkStyle","textAlign","AddTodo","state","onSubmit","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8QAGaA,EAAb,4MACCC,SAAW,WACV,MAAO,CACNC,WAAY,UACZC,QAAS,OACTC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAAY,eAAiB,SANhE,EAUCC,aAAe,SAACC,GACfC,QAAQC,IAAI,EAAKN,QAXnB,uDAaW,IAAD,EACcO,KAAKP,MAAMC,KAAzBO,EADA,EACAA,GAAIC,EADJ,EACIA,MAEZ,OACC,yBAAKC,MAAOH,KAAKZ,YAChB,2BACC,2BACCgB,KAAK,WAELC,SAAUL,KAAKP,MAAMG,aAAaU,KAAKN,KAAMC,KAE7C,IAAMC,EACP,4BAAQC,MAAOI,EAAUC,QAASR,KAAKP,MAAMgB,QAAQH,KAAKN,KAAMC,IAAhE,WAzBL,GAA8BS,aAwCxBH,EAAW,CAChBlB,WAAY,MACZsB,MAAO,QACPC,OAAQ,OACRtB,QAAS,UACTuB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGO5B,IC3BA6B,E,uKArBJ,IAAD,OAER,OAAOhB,KAAKP,MAAMwB,MAAMC,KAAI,SAACxB,GAAD,OAC3B,kBAAC,EAAD,CACCyB,IAAKzB,EAAKO,GACVP,KAAMA,EAENE,aAAc,EAAKH,MAAMG,aACzBa,QAAS,EAAKhB,MAAMgB,iB,GATJC,a,MCDL,SAASU,IACvB,OACC,4BAAQjB,MAAOkB,GACd,wCACA,kBAAC,IAAD,CAAMC,GAAG,IAAInB,MAAOoB,GAApB,QAEQ,IAJT,IAKG,IACF,kBAAC,IAAD,CAAMD,GAAG,SAASnB,MAAOoB,GAAzB,UAOH,IAAMF,EAAc,CACnBhC,WAAY,OACZsB,MAAO,OACPa,UAAW,SACXlC,QAAS,QAGJiC,EAAY,CACjBZ,MAAO,OACPnB,eAAgB,Q,QCiBFiC,EAzCf,4MACCC,MAAQ,CAEPxB,MAAO,IAHT,EAMCyB,SAAW,SAAC9B,GACXA,EAAE+B,iBACF,EAAKnC,MAAMoC,QAAQ,EAAKH,MAAMxB,OAC9B,EAAK4B,SAAS,CAAE5B,MAAO,MATzB,EAaCG,SAAW,SAACR,GAAD,OAAO,EAAKiC,SAAL,eAAiBjC,EAAEkC,OAAOC,KAAOnC,EAAEkC,OAAOE,SAb7D,uDAeE,OACC,0BAAM9B,MAAO,CAAE+B,QAAS,QAAUP,SAAU3B,KAAK2B,UAChD,2BACCvB,KAAK,OACL4B,KAAK,QACLG,YAAY,eACZhC,MAAO,CAAEiC,KAAM,KAAM9C,QAAS,OAC9B2C,MAAOjC,KAAK0B,MAAMxB,MAElBG,SAAUL,KAAKK,WAEhB,2BACCD,KAAK,SACL6B,MAAM,SACNI,UAAU,MACVlC,MAAO,CAAEiC,KAAM,YA9BpB,GAA6B1B,aCDd,SAAS4B,IACvB,OACC,kBAAC,IAAMC,SAAP,KACC,qCACA,oF,qBCoGYC,E,4MA9Fdd,MAAQ,CAEPT,MAAO,I,EA0BRrB,aAAe,SAACK,GAEf,EAAK6B,SAAS,CACbb,MAAO,EAAKS,MAAMT,MAAMC,KAAI,SAACxB,GAI5B,OAHIA,EAAKO,KAAOA,IACfP,EAAKC,WAAaD,EAAKC,WAEjBD,Q,EAKVe,QAAU,SAACR,GACVwC,IACEC,OADF,qDACuDzC,IACrD0C,MAAK,SAACC,GAAD,OACL,EAAKd,SAAS,CACbb,MAAM,YAAK,EAAKS,MAAMT,MAAM4B,QAAO,SAACnD,GAAD,OAAUA,EAAKO,KAAOA,Y,EAK7D4B,QAAU,SAAC3B,GACVuC,IACEK,KAAK,6CAA8C,CACnD5C,QACAP,WAAW,IAEXgD,MAAK,SAACC,GAAD,OAAS,EAAKd,SAAS,CAAEb,MAAM,GAAD,mBAAM,EAAKS,MAAMT,OAAjB,CAAwB2B,EAAIG,a,kEAlC7C,IAAD,OACnBN,IACEO,IAAI,wDACJL,MAAK,SAACC,GAAD,OAAS,EAAKd,SAAS,CAAEb,MAAO2B,EAAIG,Y,+BAkClC,IAAD,OAER,OAEC,kBAAC,IAAD,KACC,yBAAKV,UAAU,OACd,yBAAKA,UAAU,aACd,kBAACjB,EAAD,MAEA,kBAAC,IAAD,CACC6B,OAAK,EACLC,KAAK,IACLC,OAAQ,SACP1D,GADO,OAGP,kBAAC,IAAM8C,SAAP,KACC,kBAAC,EAAD,CAASV,QAAS,EAAKA,UACvB,kBAAC,EAAD,CACCZ,MAAO,EAAKS,MAAMT,MAElBrB,aAAc,EAAKA,aACnBa,QAAS,EAAKA,cAKlB,kBAAC,IAAD,CAAOyC,KAAK,SAASE,UAAWd,IAAgB,W,GAtFpC5B,aCCE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.4667b8ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n\tgetStyle = () => {\r\n\t\treturn {\r\n\t\t\tbackground: '#f4f4f4',\r\n\t\t\tpadding: '10px',\r\n\t\t\tborderBottom: 'tpx #ccc dotted',\r\n\t\t\ttextDecoration: this.props.todo.completed ? 'line-through' : 'none',\r\n\t\t};\r\n\t};\r\n\r\n\tmarkComplete = (e) => {\r\n\t\tconsole.log(this.props);\r\n\t};\r\n\trender() {\r\n\t\tconst { id, title } = this.props.todo;\r\n\t\t//inline styling requires 2 {}\r\n\t\treturn (\r\n\t\t\t<div style={this.getStyle()}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t// Have to call function as a prop that was passed and move up the tree to app, bind is what you are sending back, always this as 1st arg\r\n\t\t\t\t\t\tonChange={this.props.markComplete.bind(this, id)}\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t{' ' + title}\r\n\t\t\t\t\t<button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>\r\n\t\t\t\t\t\tx\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nTodoItem.propTypes = {\r\n\ttodo: PropTypes.object.isRequired,\r\n\tmarkComplete: PropTypes.func.isRequired,\r\n\tdelTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nconst btnStyle = {\r\n\tbackground: 'red',\r\n\tcolor: 'white',\r\n\tborder: 'none',\r\n\tpadding: '5px 8px',\r\n\tborderRadius: '50%',\r\n\tcursor: 'pointer',\r\n\tfloat: 'right',\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n\trender() {\r\n\t\t//map the array of props given to make each object its own comp\r\n\t\treturn this.props.todos.map((todo) => (\r\n\t\t\t<TodoItem\r\n\t\t\t\tkey={todo.id}\r\n\t\t\t\ttodo={todo}\r\n\t\t\t\t//send functions as props from app\r\n\t\t\t\tmarkComplete={this.props.markComplete}\r\n\t\t\t\tdelTodo={this.props.delTodo}\r\n\t\t\t></TodoItem>\r\n\t\t));\r\n\t}\r\n}\r\n\r\nTodos.propTypes = {\r\n\t//define what type the prop is and if required\r\n\ttodos: PropTypes.array.isRequired,\r\n\tmarkComplete: PropTypes.func.isRequired,\r\n\tdelTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n\treturn (\r\n\t\t<header style={headerStyle}>\r\n\t\t\t<h1>TodoList</h1>\r\n\t\t\t<Link to=\"/\" style={linkStyle}>\r\n\t\t\t\tHome\r\n\t\t\t</Link>{' '}\r\n\t\t\t|{' '}\r\n\t\t\t<Link to=\"/about\" style={linkStyle}>\r\n\t\t\t\tAbout\r\n\t\t\t</Link>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nconst headerStyle = {\r\n\tbackground: '#333',\r\n\tcolor: '#fff',\r\n\ttextAlign: 'center',\r\n\tpadding: '10px',\r\n};\r\n\r\nconst linkStyle = {\r\n\tcolor: '#fff',\r\n\ttextDecoration: 'none',\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n\tstate = {\r\n\t\t//this is a component state\r\n\t\ttitle: '',\r\n\t};\r\n\r\n\tonSubmit = (e) => {\r\n\t\te.preventDefault(); //prevent reload of page\r\n\t\tthis.props.addTodo(this.state.title); //send input up to app\r\n\t\tthis.setState({ title: '' }); //reset state for next input\r\n\t};\r\n\r\n\t//dynamic, so long as the target element's name is same as key of state, can update\r\n\tonChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form style={{ display: 'flex' }} onSubmit={this.onSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\tplaceholder=\"Add Todo ...\"\r\n\t\t\t\t\tstyle={{ flex: '10', padding: '5px' }}\r\n\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\t//onchange update state\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t></input>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tvalue=\"Submit\"\r\n\t\t\t\t\tclassName=\"btn\"\r\n\t\t\t\t\tstyle={{ flex: '1' }}\r\n\t\t\t\t></input>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nAddTodo.propTypes = {\r\n\taddTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\nexport default function About() {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h1>About</h1>\r\n\t\t\t<p>This is a todolist as a part of a React crash course</p>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport axios from 'axios';\n\n//import { v4 as uuid } from 'uuid';\n\nclass App extends Component {\n\tstate = {\n\t\t//state is an object that dictates how comp behaves and what it renders\n\t\ttodos: [\n\t\t\t//this is an array of objects that will be passed and rendered to one comp\n\t\t\t/*{\n\t\t\t\tid: uuid(),\n\t\t\t\ttitle: 'Take out the trash',\n\t\t\t\tcompleted: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: uuid(),\n\t\t\t\ttitle: 'Eat',\n\t\t\t\tcompleted: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: uuid(),\n\t\t\t\ttitle: 'Meet with boss',\n\t\t\t\tcompleted: false,\n\t\t\t},*/\n\t\t],\n\t};\n\n\tcomponentDidMount() {\n\t\taxios\n\t\t\t.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n\t\t\t.then((res) => this.setState({ todos: res.data }));\n\t}\n\n\tmarkComplete = (id) => {\n\t\t//toggle complete\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.map((todo) => {\n\t\t\t\tif (todo.id === id) {\n\t\t\t\t\ttodo.completed = !todo.completed;\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t}),\n\t\t});\n\t};\n\n\tdelTodo = (id) => {\n\t\taxios\n\t\t\t.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n\t\t\t.then((res) =>\n\t\t\t\tthis.setState({\n\t\t\t\t\ttodos: [...this.state.todos.filter((todo) => todo.id !== id)],\n\t\t\t\t})\n\t\t\t);\n\t};\n\n\taddTodo = (title) => {\n\t\taxios\n\t\t\t.post('https://jsonplaceholder.typicode.com/todos', {\n\t\t\t\ttitle,\n\t\t\t\tcompleted: false,\n\t\t\t})\n\t\t\t.then((res) => this.setState({ todos: [...this.state.todos, res.data] }));\n\t};\n\n\trender() {\n\t\t//pass prop with {this.state.comp}\n\t\treturn (\n\t\t\t//surround all with Router\n\t\t\t<Router>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"Container\">\n\t\t\t\t\t\t<Header></Header>\n\t\t\t\t\t\t{/* this is a route, put components rendered in that route there and specify path and render func, use exact path so parent routes don't get matched too */}\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\tpath=\"/\"\n\t\t\t\t\t\t\trender={(\n\t\t\t\t\t\t\t\tprops //this the func that will render the 2 components AddTodo and Todos\n\t\t\t\t\t\t\t) => (\n\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t<AddTodo addTodo={this.addTodo}></AddTodo>\n\t\t\t\t\t\t\t\t\t<Todos\n\t\t\t\t\t\t\t\t\t\ttodos={this.state.todos}\n\t\t\t\t\t\t\t\t\t\t//send functions as props\n\t\t\t\t\t\t\t\t\t\tmarkComplete={this.markComplete}\n\t\t\t\t\t\t\t\t\t\tdelTodo={this.delTodo}\n\t\t\t\t\t\t\t\t\t></Todos>\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t></Route>\n\t\t\t\t\t\t<Route path=\"/about\" component={About}></Route>{' '}\n\t\t\t\t\t\t{/*another way to make a route*/}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}